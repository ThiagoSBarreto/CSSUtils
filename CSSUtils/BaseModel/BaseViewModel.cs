using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading.Tasks;

namespace CSSUtils.BaseModel
{
    public class BaseViewModel : INotifyPropertyChanged
    {
        /// <summary>
        /// Set a property value and raises a PropertyChangedEvent to the MVVM Controller
        /// </summary>
        /// <typeparam name="T">Object type of the Property</typeparam>
        /// <param name="backingStore">Reference to the Private object that will hold the value</param>
        /// <param name="value">The new value to the Property</param>
        /// <param name="propertyName">Optional: The name of the Property that will be used in the PropertyChanged Event, automaticaly takes the Property Name of the caller method</param>
        /// <param name="onChanged">Optional: Sets the Action to be called when the property Change, automaticaly generated by the SetPropety method</param>
        /// <returns></returns>
        protected bool SetProperty<T>(ref T backingStore, T value,
            [CallerMemberName] string propertyName = "",
            Action onChanged = null)
        {
            if (EqualityComparer<T>.Default.Equals(backingStore, value))
                return false;

            backingStore = value;
            onChanged?.Invoke();
            OnPropertyChanged(propertyName);
            return true;
        }

        public event PropertyChangedEventHandler PropertyChanged;
        /// <summary>
        /// Raises the PropertyChanged Event
        /// </summary>
        /// <param name="propertyName">Name of the Property that was changed</param>
        protected void OnPropertyChanged([CallerMemberName] string propertyName = "")
        {
            var changed = PropertyChanged;
            if (changed == null)
                return;

            changed.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }
}
